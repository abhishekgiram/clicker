{"version":3,"sources":["Header.js","Clicker.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","href","title","defaultProps","clicker","incrementCount","setState","prevState","count","decrementCount","resetCount","state","style","marginTop","this","height","width","onClick","marginLeft","Component","App","Clicker","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAIMA,G,WAAS,SAACC,GAAD,OACd,yBAAKC,UAAU,YACR,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,0CACb,yBAAKA,UAAU,6BAA6BC,KAAK,KAAKF,EAAMG,YAO5EJ,EAAOK,aAAe,CACrBD,MAAM,SAOQJ,QCrBTM,E,YAEJ,WAAYL,GAAO,IAAD,8BAClB,+CAODM,eAAiB,WAChB,EAAKC,UAAS,SAACC,GAAD,MACZ,CAACC,MAAMD,EAAUC,MAAO,OAVR,EAenBC,eAAiB,WAChB,EAAKH,UAAS,SAACC,GAAD,MACd,CAACC,MAAMD,EAAUC,MAAM,OAjBL,EAqBnBE,WAAW,WACV,EAAKJ,UAAS,iBAAK,CAACE,MAAM,OApB1B,EAAKG,MAAQ,CACZH,MAAMT,EAAMS,OAHK,E,sEA0BZ,OACI,yBAAKR,UAAU,aACX,yBAAKA,UAAU,UACX,yBAAKY,MAAO,CAAGC,UAAW,KACtB,yBAAKb,UAAU,qBAAqBc,KAAKH,MAAMH,QAEnD,6BACI,4BAASI,MAAO,CAAEG,OAAQ,GAAIC,MAAM,GAAIH,UAAW,IAAMI,QAASH,KAAKT,gBAAvE,KAGA,4BAASO,MAAO,CAAEG,OAAQ,GAAIC,MAAM,GAAIE,WAAY,GAAKD,QAASH,KAAKJ,YAAvE,OAGA,4BAAQE,MAAO,CAAEG,OAAQ,GAAIC,MAAM,GAAIE,WAAY,GAAKD,QAASH,KAAKL,gBAAtE,Y,GAzCFU,aAmDtBf,EAAQD,aAAc,CACrBK,MAAM,GAGQJ,QChCAgB,E,YApBd,WAAYrB,GAAQ,IAAD,8BACZ,4CAAMA,KAEDY,MAAQ,CACTT,MAAO,iBAJC,E,sEASlB,OACE,6BACA,kBAAC,EAAD,CAAQA,MAAOY,KAAKH,MAAMT,QACxB,6BACA,kBAACmB,EAAD,Y,GAdYC,IAAMH,WCOJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2d64b719.chunk.js","sourcesContent":["import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './style.css';\r\n\r\nconst Header = (props) =>(\r\n\t<nav className=\" header \">\r\n        <div className=\"container\">\r\n            <div className=\"row m-auto\">\r\n                <i className=\"fa fa-hand-pointer-o fa-4x text-white\"></i>\r\n                <div className=\"h1 ml-2 my-auto text-light\" href=\"/\">{props.title}</div>\r\n            </div>\r\n        </div>\r\n    </nav>\r\n\r\n\t);\r\n\r\nHeader.defaultProps = {\r\n\ttitle:'Title'\r\n};\r\n \r\nHeader.propTypes = {\r\n\ttitle: propTypes.string\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './style.css';\r\n//import propTypes from 'prop-types';\r\nclass clicker extends Component {\r\n\r\n\t constructor(props){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount:props.count\r\n\t\t};\r\n\t}\r\n\r\n\r\n\tincrementCount = () =>{\r\n\t\tthis.setState((prevState)=>(\r\n\t\t\t\t{count:prevState.count +1}\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tdecrementCount = () => {\r\n\t\tthis.setState((prevState)=>(\r\n\t\t{count:prevState.count-1}\r\n\t\t)\r\n\t);\t\r\n}\r\n\tresetCount=()=>{\r\n\t\tthis.setState(()=>({count:0}));\r\n\t}\r\n\r\n\trender() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"square\">\r\n                    <div style={{  marginTop: 10 }}>                        \r\n                        <div className=\"mx-auto display-1\">{this.state.count}</div>\r\n                    </div>\r\n                    <div >\r\n                        <button  style={{ height: 30, width:50, marginTop: 10 }} onClick={this.incrementCount}>\r\n                            +\r\n                        </button>\r\n                        <button  style={{ height: 30, width:50, marginLeft: 2 }} onClick={this.resetCount}>\r\n                            CLR\r\n                        </button>\r\n                        <button style={{ height: 30, width:50, marginLeft: 2 }} onClick={this.decrementCount}>\r\n                            -\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclicker.defaultProps ={\r\n\tcount:0\r\n};\r\n\r\nexport default clicker;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Clicker from './Clicker';\nimport './style.css';\nclass App extends React.Component {\n constructor(props) {\n        super(props);\n\n        this.state = {\n            title: 'React Clicker'\n        }\n    }\n    render(){\n\n  return (\n    <div>\n    <Header title={this.state.title} />\n      <div>\n      <Clicker />\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}